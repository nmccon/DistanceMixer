TITLE:: DistanceMixer
summary:: GUI for FOA spatialiasation based on imaginary distances
categories:: Undocumented classes
related:: Classes/DistanceFilter, Guides/Intro-to-the-ATK, Classes/PathName#-makeBufDict

DESCRIPTION::
Tool to assist the construction of aural landscapes

CLASSMETHODS::

METHOD:: new
Create GUI and control sound field position

ARGUMENT:: numviews
The total number of sound sources you wish to spatialise.

ARGUMENT:: bufferDict
The directory of audio files to spatialise. This uses Eli Fieldsteel's makeBufDict extension to the Pathname class.

ARGUMENT:: distMin
The minimum distance in metres of each source from the imagined listener's position

ARGUMENT:: distMax
The maximum distance in metres of each source from the imagined listener's position

ARGUMENT:: wet
The ratio of direct and reverberant sound for all sound sources

ARGUMENT:: out
The bus that feeds the ambisonic encoder

ARGUMENT:: encoder
An ambisonic encoder appropriate to the channel configuration of the input directory set using the bufDict argument. This requires all input sources to have the same number of channels. Separate instances of the DistanceMixer and an appropriate encoder are required if using different input channel configurations.

ARGUMENT:: group
The gropup on which to place the DistanceMixer. Best practice is to create separate groups for encoding and decoding and place the DistanceMixer on the encoding group that sits before the decoding group.

ARGUMENT:: fxsend
The bus used to feed a reverberation unit.

returns:: A new instance of the DistanceMixer interface to control the spatialisation parameters of the number of sound sources specified via the numViews argument.


INSTANCEMETHODS::

METHOD:: makeGUI
Called internally to create all necesssary GUI elements


METHOD:: numInputs
Called internally to set number of channels for playback and encoding based on the decoder type

returns:: encoder.numInputs

METHOD:: oscTest
Creates separate GUI window to send OSC data to another application. Enter the path in the text field.

returns:: GUI and OSCdefs


EXAMPLES::

code::
(
//setup example - copy into editor

s = Server.local;
s.options.numOutputBusChannels_(4);
s.options.numInputBusChannels_(4);
s.options.memSize = 2.pow(20);
s.options.numWireBufs = 1024;

~busses = {
    ~bus = Dictionary.new;
    ~bus.add(\encBus -> Bus.audio(s, 4));
    ~bus.add(\reverbBus -> Bus.audio(s, 4));
};

~reset = {
    s.newBusAllocators;
    ServerBoot.removeAll;
    ServerTree.removeAll;
    ServerQuit.removeAll;
};

~nodes ={
    s.bind({
        ~decGroup = Group.new;
        ~encGroup = Group.before(~decGroup);
        ~fxGroup = Group.after(~encGroup);
        ~decodeSynth = Synth(\decodeSynth, [\inBus,  ~bus[\encBus]], ~decGroup);
        ~reverbSynth = Synth(\revAmb, [\inbus, ~bus[\reverbBus],\out, ~bus[\encBus]], ~fxGroup);
    });
};

ServerBoot.add(~busses);
ServerQuit.add(~reset, ~decoder.free);

~fftsize = 2048;

s.waitForBoot({

    {
        var wIR, xIR, yIR, zIR, specBufSize;

        //supply FOA FuMa B-format Impulse response

        wIR = Buffer.readChannel(s,"/Users/username/Documents/IRs/wav/wxyz.wav", channels: [0]);
        xIR = Buffer.readChannel(s,"/Users/username/Documents/IRs/wav/wxyz.wav", channels: [1]);
        yIR = Buffer.readChannel(s,"/Users/username/Documents/IRs/wav/wxyz.wav", channels: [2]);
        zIR = Buffer.readChannel(s,"/Users/username/Documents/IRs/wav/wxyz.wav", channels: [3]);

        s.sync;

        specBufSize = PartConv.calcBufSize(~fftsize, wIR);

        ~wSpectral= Buffer.alloc(s, specBufSize, 1);
        ~xSpectral= Buffer.alloc(s, specBufSize, 1);
        ~ySpectral= Buffer.alloc(s, specBufSize, 1);
        ~zSpectral= Buffer.alloc(s, specBufSize, 1);

        ~wSpectral.preparePartConv(wIR, ~fftsize);
        ~xSpectral.preparePartConv(xIR, ~fftsize);
        ~ySpectral.preparePartConv(yIR, ~fftsize);
        ~zSpectral.preparePartConv(zIR, ~fftsize);

        s.sync;

        wIR.free;
        xIR.free;
        yIR.free;
        zIR.free;

    }.fork;

    s.sync;

    ~decoder = FoaDecoderKernel.newCIPIC(21, s, 48000); //Binaural decoder

    s.sync;

    s.sync;

    SynthDef(\decodeSynth, {
        arg inBus, outbus = 0;
        var foa;
        foa = In.ar(inBus, 4);
        foa = FoaDecode.ar(foa, ~decoder);
        ReplaceOut.ar(outbus, foa);
    }).add;

    SynthDef(\revAmb, {
        arg inbus, out;
        var convsig, sig;
        sig = In.ar(inbus, 4);

        sig = FoaDecode.ar(sig, FoaDecoderMatrix.newBtoA(\flu));

        convsig = [
            PartConv.ar(sig[0], ~fftsize, ~wSpectral.bufnum),
            PartConv.ar(sig[1], ~fftsize, ~xSpectral.bufnum),
            PartConv.ar(sig[2], ~fftsize, ~ySpectral.bufnum),
            PartConv.ar(sig[3], ~fftsize, ~zSpectral.bufnum)
        ];
        convsig = FoaEncode.ar(convsig, FoaEncoderMatrix.newAtoB(\flu));

        Out.ar(out, convsig);
    }).add;

    ServerTree.add(~nodes);

    s.freeAll;

    s.sync;

    //s.plotTree;

    s.sync;

   // s.meter;

    "Setup complete. Ambisonic decoding via % decoder".format(~decoder.kind).postln;
}))


// load buffers
~bufs = PathName(/*path to your folder of sounds !*/).makeBufDict

~encoder = FoaEncoderKernel.newSuper(); //stereo encoder for stereo files - change as necessary

// create DistanceMixer
d = DistanceMixer.new(10, ~bufs, 1, 10, 0.1, ~bus[\encBus], ~encoder, ~encGroup, ~bus[\reverbBus])
::
